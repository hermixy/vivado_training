/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "ps7_init.h"
#include <xil_io.h>
#include "xparameters.h"
#include "xscugic.h"
#include "xaxidma.h"

#define TRANSFER_DMA_TO_DEVICE 0
#define TRANSFER_DEVICE_TO_DMA 1

#define IMGIS 640*480
#define IMGOS 638*478

XScuGic InterruptController;
static XScuGic_Config *GicConfig;
int frame_counter = 0;

u32 tx_fr_addr=0x01000000;
u32 rx_fr_addr=0x08000000;

//////////////////////////////////////////////////////////////
//
// Initialize AXI DMA
/////////////////////////////////////////////////////////////
int InitializeAXIDma( void ) {
	u32 tmpVal;

	// MM2S_DMACR.RS = 1
	tmpVal = Xil_In32( XPAR_AXI_DMA_0_BASEADDR + 0x00 );
	tmpVal &= ~(0x1000);						// disble mm2s interrupt on complete
	tmpVal |= 0x0001;							// dma mm2s enable
	Xil_Out32( XPAR_AXI_DMA_0_BASEADDR + 0x00, tmpVal );

	//tmpVal = Xil_In32( XPAR_AXI_DMA_0_BASEADDR + 0x00 );
	//xil_printf( "value for mm2s dma control register: %x\n\r", tmpVal );

	// S2MM_DMACR.RS = 1
	tmpVal = Xil_In32( XPAR_AXI_DMA_0_BASEADDR + 0x30 );
	tmpVal |= 0x1001;							// dma s2mm enable, enable interrupt on complete
	Xil_Out32( XPAR_AXI_DMA_0_BASEADDR + 0x30, tmpVal );

	//tmpVal = Xil_In32( XPAR_AXI_DMA_0_BASEADDR + 0x30 );
	//xil_printf( "value for s2mm dma control register: %x\n\r", tmpVal );

	return 0;
}

//////////////////////////////////////////////////////////////
//
// Reset AXI DMA
/////////////////////////////////////////////////////////////
int ResetAXIDma( void ) {
	u32 tmpVal;

	tmpVal = Xil_In32( XPAR_AXI_DMA_0_BASEADDR + 0x00 );
	tmpVal |= 0x4;						// reset mm2s
	Xil_Out32( XPAR_AXI_DMA_0_BASEADDR + 0x00, tmpVal );
	while( (tmpVal = Xil_In32( XPAR_AXI_DMA_0_BASEADDR + 0x00)) & 0x4);

	tmpVal = Xil_In32( XPAR_AXI_DMA_0_BASEADDR + 0x30 );
	tmpVal |= 0x4;						// reset s2mm
	Xil_Out32( XPAR_AXI_DMA_0_BASEADDR + 0x30, tmpVal );
	while( (tmpVal = Xil_In32( XPAR_AXI_DMA_0_BASEADDR + 0x30)) & 0x4);

	return 0;
}

int DisableConvolutionUnit( void ) {
	// set the gpios direction as output
	// the gpios is by default output, so this is not needed.

	// disable the Convolution Unit
	Xil_Out32( XPAR_AXI_GPIO_0_BASEADDR, 0 );
	return 0;
}

int EnableConvolutionUnit( void ) {
	// set the gpios direction as output
	// the gpios is by default output, so this is not needed.

	// enable the Convolution Unit
	Xil_Out32( XPAR_AXI_GPIO_0_BASEADDR, 1 );
	return 0;
}

int StartDMATransfer(u32 address, u32 len, u8 direction) {
	switch(direction) {
		case TRANSFER_DMA_TO_DEVICE:
			// write source address to MM2S_SA register.
			Xil_Out32( XPAR_AXI_DMA_0_BASEADDR + 0x18, address );
			// write length to MM2S_LENGTH register.
			Xil_Out32( XPAR_AXI_DMA_0_BASEADDR + 0x28, len );
			return 0;
		case TRANSFER_DEVICE_TO_DMA:
			// write destination address to S2MM_DA register.
			Xil_Out32( XPAR_AXI_DMA_0_BASEADDR + 0x48, address );
			// write length to S2MM_LENGTH register.
			Xil_Out32( XPAR_AXI_DMA_0_BASEADDR + 0x58, len );
			return 0;
		default:
			return -1;
	}
}

void InterruptHandler( void ) {
	u32 tmpValue;

	if(frame_counter < 6) {

		tmpValue = Xil_In32( XPAR_AXI_DMA_0_BASEADDR + 0x34 );
		tmpValue = tmpValue | 0x1000;
		Xil_Out32( XPAR_AXI_DMA_0_BASEADDR + 0x34, tmpValue );

		tx_fr_addr += IMGIS*sizeof(u32);
		rx_fr_addr += IMGOS*sizeof(u32);

		//Xil_DCacheFlushRange(tx_fr_addr, IMGIS*sizeof(u32));
		//Xil_DCacheFlushRange(rx_fr_addr, IMGOS*sizeof(u32));

		// reset convolution unit
		DisableConvolutionUnit();
		xil_printf("reset convolution unit...\n\r");
		ResetAXIDma();
		xil_printf("reset axi dma...\n\r");
		InitializeAXIDma();
		xil_printf("restart axi dma...\n\r");

		//
		// do the dma transfer to push and get result image
		StartDMATransfer(tx_fr_addr, IMGIS*sizeof(u32), TRANSFER_DMA_TO_DEVICE);
		StartDMATransfer(rx_fr_addr, IMGOS*sizeof(u32), TRANSFER_DEVICE_TO_DMA);

		// start convolution unit
		xil_printf("starting up convolution unit...\n\r");
		EnableConvolutionUnit();

		frame_counter++;
	}

}

int SetupInterruptSystem( XScuGic *XScuGicInstancePtr ) {
	Xil_ExceptionRegisterHandler( XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler) XScuGic_InterruptHandler, XScuGicInstancePtr);
	Xil_ExceptionEnable();		// enable interrupt in ARM.
	return XST_SUCCESS;
}

int InitializeInterruptSystem( deviceID ) {
	int Status;

	GicConfig = XScuGic_LookupConfig( deviceID );
	if( NULL == GicConfig ) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize( &InterruptController, GicConfig, GicConfig->CpuBaseAddress);
	if( Status != XST_SUCCESS ) {
		return XST_FAILURE;
	}

	Status = SetupInterruptSystem( &InterruptController );
	if( Status != XST_SUCCESS ) {
			return XST_FAILURE;
	}

	Status = XScuGic_Connect( &InterruptController,
			XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR,
			(Xil_ExceptionHandler)InterruptHandler,
			NULL );
	if( Status != XST_SUCCESS ) {
		return XST_FAILURE;
	}

	XScuGic_Enable( &InterruptController,
			XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR );

	xil_printf("Setup interrupt handler successfully\n\r");
	return XST_SUCCESS;
}

int main()
{
    init_platform();

    // enable the pl
    ps7_post_config();

    //
    xil_printf("initializing axi dma...\n\r");
    InitializeAXIDma();

    // set the interrupt system and interrupt handling
    // interrupt
    xil_printf("enabling the interrupt handling system...\n\r");
    InitializeInterruptSystem( XPAR_PS7_SCUGIC_0_DEVICE_ID );

    // reset convolution unit
    xil_printf("reset convolution unit...\n\r");
    DisableConvolutionUnit();

    // do the dma transfer to push and get result image
    StartDMATransfer(tx_fr_addr, IMGIS*sizeof(u32), TRANSFER_DMA_TO_DEVICE);
    StartDMATransfer(rx_fr_addr, IMGOS*sizeof(u32), TRANSFER_DEVICE_TO_DMA);

    // start convolution unit
    xil_printf("starting up convolution unit...\n\r");
    EnableConvolutionUnit();

    return 0;
}
